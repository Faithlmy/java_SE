 使用封装有三大好处：

         1、良好的封装能够减少耦合。

         2、类内部的结构可以自由修改。

         3、可以对成员进行更精确的控制。

         4、隐藏信息，实现细节。

      首先我们先来看两个类：Husband.java、Wife.java

复制代码
public class Husband {
    
    /*
     * 对属性的封装
     * 一个人的姓名、性别、年龄、妻子都是这个人的私有属性
     */
    private String name ;
    private String sex ;
    private int age ;
    private Wife wife;
    
    /*
     * setter()、getter()是该对象对外开发的接口
     */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setWife(Wife wife) {
        this.wife = wife;
    }
}
复制代码
复制代码
public class Wife {
    private String name;
    private int age;
    private String sex;
    private Husband husband;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setHusband(Husband husband) {
        this.husband = husband;
    }

    public Husband getHusband() {
        return husband;
    }
    
}
复制代码
       从上面两个实例我们可以看出Husband里面wife引用是没有getter()的，同时wife的age也是没有getter()方法的。至于理由我想各位都懂的，男人嘛深屋藏娇妻嘛，没有那个女人愿意别人知道她的年龄。

      所以封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果不想被外界方法，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。比如我们将一个房子看做是一个对象，里面的漂亮的装饰，如沙发、电视剧、空调、茶桌等等都是该房子的私有属性，但是如果我们没有那些墙遮挡，是不是别人就会一览无余呢？没有一点儿隐私！就是存在那个遮挡的墙，我们既能够有自己的隐私而且我们可以随意的更改里面的摆设而不会影响到其他的。但是如果没有门窗，一个包裹的严严实实的黑盒子，又有什么存在的意义呢？所以通过门窗别人也能够看到里面的风景。所以说门窗就是房子对象留给外界访问的接口。

      通过这个我们还不能真正体会封装的好处。现在我们从程序的角度来分析封装带来的好处。如果我们不使用封装，那么该对象就没有setter()和getter()，那么Husband类应该这样写：

复制代码
public class Husband {
    public String name ;
    public String sex ;
    public int age ;
    public Wife wife;
}
复制代码
     我们应该这样来使用它：

Husband husband = new Husband();
        husband.age = 30;
        husband.name = "张三";
        husband.sex = "男";    //貌似有点儿多余
      但是那天如果我们需要修改Husband，例如将age修改为String类型的呢？你只有一处使用了这个类还好，如果你有几十个甚至上百个这样地方，你是不是要改到崩溃。如果使用了封装，我们完全可以不需要做任何修改，只需要稍微改变下Husband类的setAge()方法即可。

复制代码
public class Husband {
    
    /*
     * 对属性的封装
     * 一个人的姓名、性别、年龄、妻子都是这个人的私有属性
     */
    private String name ;
    private String sex ;
    private String age ;    /* 改成 String类型的*/
    private Wife wife;
    
    public String getAge() {
        return age;
    }
    
    public void setAge(int age) {
        //转换即可
        this.age = String.valueOf(age);
    }
    
    /** 省略其他属性的setter、getter **/
    
}
复制代码
      其他的地方依然那样引用(husband.setAge(22))保持不变。

      到了这里我们确实可以看出，封装确实可以使我们容易地修改类的内部实现，而无需修改使用了该类的客户代码。

      我们在看这个好处：可以对成员变量进行更精确的控制。

      还是那个Husband，一般来说我们在引用这个对象的时候是不容易出错的，但是有时你迷糊了，写成了这样：

Husband husband = new Husband();
        husband.age = 300;
      也许你是因为粗心写成了，你发现了还好，如果没有发现那就麻烦大了，逼近谁见过300岁的老妖怪啊！

      但是使用封装我们就可以避免这个问题，我们对age的访问入口做一些控制(setter)如：

复制代码
public class Husband {
    
    /*
     * 对属性的封装
     * 一个人的姓名、性别、年龄、妻子都是这个人的私有属性
     */
    private String name ;
    private String sex ;
    private int age ;    /* 改成 String类型的*/
    private Wife wife;

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        if(age > 120){
            System.out.println("ERROR：error age input....");    //提示錯誤信息
        }else{
            this.age = age;
        }
        
    }
    
    /** 省略其他属性的setter、getter **/
    
}
复制代码
      上面都是对setter方法的控制，其实通过使用封装我们也能够对对象的出口做出很好的控制。例如性别我们在数据库中一般都是已1、0方式来存储的，但是在前台我们又不能展示1、0，这里我们只需要在getter()方法里面做一些转换即可。

复制代码
public String getSexName() {
        if("0".equals(sex)){
            sexName = "女";
        }
        else if("1".equals(sex)){
            sexName = "男";
        }
        else{
            sexName = "人妖???";
        }
        return sexName;
    }
复制代码
      在使用的时候我们只需要使用sexName即可实现正确的性别显示。同理也可以用于针对不同的状态做出不同的操作。

复制代码
public String getCzHTML(){
        if("1".equals(zt)){
            czHTML = "<a href='javascript:void(0)' onclick='qy("+id+")'>启用</a>";
        }
        else{
            czHTML = "<a href='javascript:void(0)' onclick='jy("+id+")'>禁用</a>";
        }
        return czHTML;
    }
复制代码





14
down vote
accepted
A related post here provides the information needed to grab the .git directory and simplify the answer that uml?ute 
provided:

Grab the .git directory by cloning a bare repository
$ mkdir repo
$ git clone --bare http://github/user/repo repo
Make the .git directory and move the cloned files
$ mkdir repo/.git
$ mv repo/* repo/.git
Unzip the repository
$ unzip repo.zip
Re-initialize the repository
$ cd repo
$ git init
Verify you're sync'ed
$ git pull
Reset the HEAD to clean up the status
$ git reset HEAD
Here's the log for the repo ... repo location - http://github.com/udacity/fullstack-nanodegree-vm
$ git log
commit ebcbda650bc81d7f4856f5314a0689cea5b43086
Merge: 574774b b5b787e
Author: Karl Krueger <karl@udacity.com>
Date:   Tue Apr 7 11:39:54 2015 -0700`

        Merge pull request #3 from pmallory/sharedDirAlert

        Add a login alert to explain how to access Vagrant's shared directory

commit b5b787efdb1ecec0c3c9c7f9c0fd4732f984fcb3
Author: Philip Mallory <philip@udacity.com>
Date:   Mon Apr 6 15:40:32 2015 -0700`

       move the alert into the motd

commit b8012f33c86b0d19fc4c2b972af092e88d00978f
Author: Philip Mallory <philip@udacity.com>
Date:   Mon Apr 6 14:32:01 2015 -0700`

       Add a login alert to explain how to access Vagrant's shared directory

commit 574774ba29ccd661154431d5600240f090440c37
Author: Lorenzo Brown <lorenzo@udacity.com>
Date:   Wed Mar 11 14:08:02 2015 -0700`

       Update pg_config.sh

       Added installs for Auth&Auth

commit 88fc5537b1a0017a1d76af4587a22412473809a4
Author: Lorenzo Brown <lorenzo@udacity.com>
Date:   Wed Mar 4 13:00:25 2015 -0800`

       Update and rename vagrant to vagrant/catalog/README.txt

commit f978cdc14c62b7295d8da1a95452faaa1bd108b8
Author: Lorenzo Brown <lorenzo@udacity.com>
Date:   Wed Feb 4 11:06:03 2015 -0800`

       Update Vagrantfile

       switched to port forwarding on 8080

commit d6a3a26578ef3c6d01d28abca76d817938892c7f
Author: Lorenzo Brown <lorenzo@udacity.com>
Date:   Tue Feb 3 14:52:34 2015 -0800`

       Update Vagrantfile

       Added:

       config.vm.network "forwarded_port", guest: 80, host: 8080
       config.vm.network "forwarded_port", guest: 5000, host: 5000

       FSF uses these two ports for lessons 2 & 3 respectively.

commit 752a79e408c7328ef7f1766d1b97bb468ffed90a
Author: Mike Wales <michael.wales@udacity.com>
Date:   Mon Feb 2 11:21:29 2015 -0800`

       Removed .vagrant directory

commit 5af9d19adf9ab19b1d886f6cc78e556f864b42dd
Author: Mike Wales <michael.wales@udacity.com>
Date:   Mon Feb 2 11:16:45 2015 -0800`

       Initial commit.
shareimprove this answer
edited May 23 at 10:31

Community?
11
answered Aug 3 '15 at 6:49

fracjackmac
15613
  	 	
So the init see that you already have data about the repo? But basically you loose all history like a clone with 0 deep, 
right? I'll try this, if work I'll accept as correct answer. Thank you! – Lesto Aug 3 '15 at 8:45
  	 	
Hi @lesto. Yes, the init sees the existing data about the repo, but as far as I can tell, the history is still included 
(unlike a simple clone). See my example above where I grabbed the zip file for [udacity/fullstack-nanodegree-vm ][1], 
followed the procedure, and then showed the log, which reflects all changes for this branch.
[1]:github.com/udacity/fullstack-nanodegree-vm – fracjackmac Aug 15 '15 at 20:33 
  	 	
Forgot to mention that @o172.net's comment below was extremely helpful in figuring out what the bare repository really is. 
– fracjackmac Aug 15 '15 at 20:54 
  	 	
You have LOG history, but van you checkout the old version? Is it navigable in offline mode? I don't think so BUT it is 
more than enough for the request. Sorry but I still have to check by myself, but your answer will probably help a lot. – 
Lesto Aug 15 '15 at 21:02 
add a comment
up vote
11
down vote
If you have downloaded the repository (including the.git dir), it's quite simple.

unzip the repository
$ unzip repo.zip
configure a remote in your repository that points to the clone-URI
$ cd repo
$ git init
$ git remote add origin https://github.com/user/repo.git
resync the repositories
$ git pull
In practice it seems that the "zip" downloads from github do not containt the .git directory, so this doesn't help :-(

Probably the best bet you have is therefore to do a clone on a machine that does have stable access, and then zip the .git 
directory and fetch that somehow....

shareimprove this answer
edited Oct 9 '14 at 7:25
answered Mar 28 '13 at 12:49

uml?ute
13.3k22760
  	 	
also tried from work but still unlucky.. uff but i can try to download the .git folder from http... so accepted as answer 
– Lesto Mar 28 '13 at 16:06 
  	 	
"In practice it seems that the "zip" downloads from github do not contain the .git directory" Didn't they used to? :( – 
endolith Jun 9 '16 at 15:32
  	 	
"In practice it seems that the "zip" downloads from github do not containt the .git directory, so this doesn't help" What's 
the point of leaving this answer then? – Anwar Nov 12 '16 at 13:33
add a comment
up vote
1
down vote
The only zip-like alternative to cloning is exchanging "bundles", but I'm afraid github does not offer creation/downloading 
of bundles.

A zip archive downloadable from github is just a snapshot of one particular commit of your repository history (usually the 
tip of a branch), and it doesn't contain any history — this facility is intended to automatically provide the users of 
your code base (not developers!) with a way to conveniently download a snapshot of the project's source code. Note that 
mere users and, say, downstream maintainers packaging your software for operating systems, do not usually clone whole 
histories but rather work with tarballs.

In other words, downloading a zip archive works like running git archive on the remote side and then passing you the 
resulting file.

Also note that repositories hosted on github (and other Git hosting providers) are "bare", that is, they do not contain the 
".git" subdirectory.

In any case, seems like your only way to solve this is to find a fast and reliable link and do your initial download using 
it.

But note that things change if you're okay with not having the full history. You can then use the so-called "shallow 
cloning", by passing the "--depth" command-line parameter to git clone.

shareimprove this answer
answered Mar 29 '13 at 16:29

kostix
23k43881
  	 	
NB a "bare" repository basically IS the .git directory. – helloPiers Jun 16 '13 at 19:08
add a comment
up vote
1
down vote
While the accepted answer does the trick, this seems a bit more straight forward.

unzip <repo>.zip
cd <repo>
git init
git add .
git remote add origin https://github.com/<user>/<repo>.git
git remote update
git checkout master
Just make sure to replace <user> & <repo> with your github user name and your repo name ;)

shareimprove this answer
edited Nov 12 '16 at 14:36
answered Aug 12 '16 at 2:38

arctelix
2,10311531
1	 	
This should be git add . not git add. right? – Anwar Nov 12 '16 at 13:34



<How to push the project which download from github using the type of .zip?>
<How to modify title of terminal of linux?>
<Testing use branch>
<java default>


java提高篇(二)-----理解java的三大特性之继承

      在《Think in java》中有这样一句话：复用代码是Java众多引人注目的功能之一。但要想成为极具革命性的语言，仅仅能够复制代码并对加以改变是不够的，它还必须能够做更多的事情。在这句话中最引人注目的是“复用代码”,尽可能的复用代码使我们程序员一直在追求的，现在我来介绍一种复用代码的方式，也是java三大特性之一---继承。

继承

      在讲解之前我们先看一个例子，该例子是前篇博文（java提高篇-----理解java的三大特性之封装）的。

继承—01

      从这里我们可以看出，Wife、Husband两个类除了各自的husband、wife外其余部分全部相同，作为一个想最大限度实现复用代码的我们是不能够忍受这样的重复代码，如果再来一个小三、小四、小五……（扯远了大笑）我们是不是也要这样写呢？那么我们如何来实现这些类的可复用呢？利用继承！！

      首先我们先离开软件编程的世界，从常识中我们知道丈夫、妻子、小三、小四…，他们都是人，而且都有一些共性，有名字、年龄、性别、头等等，而且他们都能够吃东西、走路、说话等等共同的行为，所以从这里我们可以发现他们都拥有人的属性和行为，同时也是从人那里继承来的这些属性和行为的。

      从上面我们就可以基本了解了继承的概念了，继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码，能够大大的提高开发的效率。继承—02

      对于Wife、Husband使用继承后，除了代码量的减少我们还能够非常明显的看到他们的关系。

      继承所描述的是“is-a”的关系，如果有两个对象A和B，若可以描述为“A是B”，则可以表示A继承B，其中B是被继承者称之为父类或者超类，A是继承者称之为子类或者派生类。

      实际上继承者是被继承者的特殊化，它除了拥有被继承者的特性外，还拥有自己独有得特性。例如猫有抓老鼠、爬树等其他动物没有的特性。同时在继承关系中，继承者完全可以替换被继承者，反之则不可以，例如我们可以说猫是动物，但不能说动物是猫就是这个道理，其实对于这个我们将其称之为“向上转型”，下面介绍。

      诚然，继承定义了类如何相互关联，共享特性。对于若干个相同或者相识的类，我们可以抽象出他们共有的行为或者属相并将其定义成一个父类或者超类，然后用这些类继承该父类，他们不仅可以拥有父类的属性、方法还可以定义自己独有的属性或者方法。

      同时在使用继承时需要记住三句话：

         1、子类拥有父类非private的属性和方法。

         2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。

        3、子类可以用自己的方式实现父类的方法。（以后介绍）。

      综上所述，使用继承确实有许多的优点，除了将所有子类的共同属性放入父类，实现代码共享，避免重复外，还可以使得修改扩展继承而来的实现比较简单。

      诚然，讲到继承一定少不了这三个东西：构造器、protected关键字、向上转型。

构造器

      通过前面我们知道子类可以继承父类的属性和方法，除了那些private的外还有一样是子类继承不了的---构造器。对于构造器而言，它只能够被调用，而不能被继承。 调用父类的构造方法我们使用super()即可。

      对于子类而已,其构造器的正确初始化是非常重要的,而且当且仅当只有一个方法可以保证这点：在构造器中调用父类构造器来完成初始化，而父类构造器具有执行父类初始化所需要的所有知识和能力。

复制代码
public class Person {
    protected String name;
    protected int age;
    protected String sex;
    
    Person(){
        System.out.println("Person Constrctor...");
    }
}

public class Husband extends Person{
    private Wife wife;

    Husband(){
        System.out.println("Husband Constructor...");
    }
    
    public static void main(String[] args) {
        Husband husband  = new Husband();
    }
}

Output:
Person Constrctor...
Husband Constructor...
复制代码
      通过这个示例可以看出，构建过程是从父类“向外”扩散的，也就是从父类开始向子类一级一级地完成构建。而且我们并没有显示的引用父类的构造器，这就是java的聪明之处：编译器会默认给子类调用父类的构造器。

      但是，这个默认调用父类的构造器是有前提的：父类有默认构造器。如果父类没有默认构造器，我们就要必须显示的使用super()来调用父类构造器，否则编译器会报错：无法找到符合父类形式的构造器。

复制代码
public class Person {
    protected String name;
    protected int age;
    protected String sex;
    
    Person(String name){
        System.out.println("Person Constrctor-----" + name);
    }
}

public class Husband extends Person{
    private Wife wife;

    Husband(){
        super("chenssy");
        System.out.println("Husband Constructor...");
    }
    
    public static void main(String[] args) {
        Husband husband  = new Husband();
    }
}

Output:
Person Constrctor-----chenssy
Husband Constructor...
复制代码
     所以综上所述：对于继承而已，子类会默认调用父类的构造器，但是如果没有默认的父类构造器，子类必须要显示的指定父类的构造器，而且必须是在子类构造器中做的第一件事(第一行代码)。

protected关键字

      private访问修饰符，对于封装而言，是最好的选择，但这个只是基于理想的世界，有时候我们需要这样的需求：我们需要将某些事物尽可能地对这个世界隐藏，但是仍然允许子类的成员来访问它们。这个时候就需要使用到protected。

      对于protected而言，它指明就类用户而言，他是private，但是对于任何继承与此类的子类而言或者其他任何位于同一个包的类而言，他却是可以访问的。

复制代码
public class Person {
    private String name;
    private int age;
    private String sex;

    protected String getName() {
        return name;
    }

    protected void setName(String name) {
        this.name = name;
    }

    public String toString(){
        return "this name is " + name;
    }
    
    /** 省略其他setter、getter方法 **/
}

public class Husband extends Person{
    private Wife wife;

    public  String toString(){
        setName("chenssy");    //调用父类的setName();
        return  super.toString();    //调用父类的toString()方法
    }

    public static void main(String[] args) {
        Husband husband = new Husband();
        
        System.out.println(husband.toString());
    }
}

Output：
this name is chenssy
复制代码
      从上面示例可以看书子类Husband可以明显地调用父类Person的setName()。

      诚然尽管可以使用protected访问修饰符来限制父类属性和方法的访问权限，但是最好的方式还是将属性保持为private(我们应当一致保留更改底层实现)，通过protected方法来控制类的继承者的访问权限。

向上转型

      在上面的继承中我们谈到继承是is-a的相互关系，猫继承与动物，所以我们可以说猫是动物，或者说猫是动物的一种。这样将猫看做动物就是向上转型。如下：

复制代码
public class Person {
    public void display(){
        System.out.println("Play Person...");
    }
    
    static void display(Person person){
        person.display();
    }
}

public class Husband extends Person{
    public static void main(String[] args) {
        Husband husband = new Husband();
        Person.display(husband);      //向上转型
    }
}
复制代码
      在这我们通过Person.display(husband)。这句话可以看出husband是person类型。

       将子类转换成父类，在继承关系上面是向上移动的，所以一般称之为向上转型。由于向上转型是从一个叫专用类型向较通用类型转换，所以它总是安全的，唯一发生变化的可能就是属性和方法的丢失。这就是为什么编译器在“未曾明确表示转型”活“未曾指定特殊标记”的情况下，仍然允许向上转型的原因。

谨慎继承

      上面讲了继承所带来的诸多好处，那我们是不是就可以大肆地使用继承呢？送你一句话：慎用继承。

      首先我们需要明确，继承存在如下缺陷：

         1、父类变，子类就必须变。

         2、继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。

         3、继承是一种强耦合关系。     

      所以说当我们使用继承的时候，我们需要确信使用继承确实是有效可行的办法。那么到底要不要使用继承呢？《Think in java》中提供了解决办法：问一问自己是否需要从子类向父类进行向上转型。如果必须向上转型，则继承是必要的，但是如果不需要，则应当好好考虑自己是否需要继承。
